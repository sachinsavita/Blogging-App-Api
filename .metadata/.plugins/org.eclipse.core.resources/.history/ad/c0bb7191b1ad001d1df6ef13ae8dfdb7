package com.blogapp.services.impl;

import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PathVariable;

import com.blogapp.entity.Category;
import com.blogapp.exceptions.ResourceNotFoundException;
import com.blogapp.payloads.CategoryDto;
import com.blogapp.repos.CategoryRepo;
import com.blogapp.services.CategoryService;

@Service
public class CategoryImpl implements CategoryService {
	
	@Autowired
	private CategoryRepo categoryRepo;
	@Autowired
	private ModelMapper modelMapper;

	@Override
	public CategoryDto createCategory(CategoryDto categoryDto) {
		
//		Category category = this.dtoToCategory(categoryDto);
//		Category savedCategory = this.categoryRepo.save(category);
//		return this.categoryToDto(savedCategory);
		
		
		Category category = this.modelMapper.map(categoryDto, Category.class);
		Category savedCategory = this.categoryRepo.save(category);
		return this.modelMapper.map(savedCategory, CategoryDto.class);
	}

	@Override
	public CategoryDto updateCategory(CategoryDto categoryDto, Integer categoryId) {
		Category category = this.categoryRepo.findById(categoryId)
				.orElseThrow(()-> new ResourceNotFoundException("Category", "Category Id",categoryId));
		
		category.setCategoryTitle(categoryDto.getCategoryTitle());
		category.setCategoryDescription(categoryDto.getCategoryDescription());
		
		Category updatedCategory = this.categoryRepo.save(category);
		return this.modelMapper.map(updatedCategory, CategoryDto.class);
	}

	@Override
	public CategoryDto deleteCategory(@PathVariable Integer categoryId) {
	
		Category category = this.categoryRepo.findById(categoryId)
				.orElseThrow(()-> new ResourceNotFoundException("Category", "Category Id",categoryId));
		
		this.categoryRepo.delete(category);
		CategoryDto deletedCategory = this.modelMapper.map(category, CategoryDto.class);
		return deletedCategory;
	}

	@Override
	public CategoryDto getCategoryById(@PathVariable Integer categoryId) {
		
		Category category = this.categoryRepo.findById(categoryId)
				.orElseThrow(()-> new ResourceNotFoundException("Category", "Category Id",categoryId));
		
		return this.modelMapper.map(category, CategoryDto.class);
	}

	@Override
	public List<CategoryDto> getCategories() {
		
		return null;
	}
	
	
	
	
	
	//Since we directly using model mapper
	
//	public Category dtoToCategory(CategoryDto categoryDto)
//	{	
//		Category category = this.modelMapper.map(categoryDto, Category.class);
//		return category;
//	}
//	
//	public CategoryDto categoryToDto(Category category)
//	{	
//		CategoryDto categoryDto = this.modelMapper.map(category, CategoryDto.class);
//		return categoryDto;
//	}

}
